{"version":3,"file":"create-api-client.es5.js","sources":["../node_modules/path-to-regexp/index.js","../src/create-helper.ts","../src/create-client.ts"],"sourcesContent":["/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * Default configs.\n */\nvar DEFAULT_DELIMITER = '/'\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \":test(\\\\d+)?\" => [\"test\", \"\\d+\", undefined, \"?\"]\n  // \"(\\\\d+)\"  => [undefined, undefined, \"\\d+\", undefined]\n  '(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = (options && options.delimiter) || DEFAULT_DELIMITER\n  var whitelist = (options && options.whitelist) || undefined\n  var pathEscaped = false\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) !== null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      pathEscaped = true\n      continue\n    }\n\n    var prev = ''\n    var name = res[2]\n    var capture = res[3]\n    var group = res[4]\n    var modifier = res[5]\n\n    if (!pathEscaped && path.length) {\n      var k = path.length - 1\n      var c = path[k]\n      var matches = whitelist ? whitelist.indexOf(c) > -1 : true\n\n      if (matches) {\n        prev = c\n        path = path.slice(0, k)\n      }\n    }\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n      pathEscaped = false\n    }\n\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var pattern = capture || group\n    var delimiter = prev || defaultDelimiter\n\n    tokens.push({\n      name: name || key++,\n      prefix: prev,\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      pattern: pattern\n        ? escapeGroup(pattern)\n        : '[^' + escapeString(delimiter === defaultDelimiter ? delimiter : (delimiter + defaultDelimiter)) + ']+?'\n    })\n  }\n\n  // Push any remaining characters.\n  if (path || index < str.length) {\n    tokens.push(path + str.substr(index))\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (data, options) {\n    var path = ''\n    var encode = (options && options.encode) || encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n        continue\n      }\n\n      var value = data ? data[token.name] : undefined\n      var segment\n\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got array')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) continue\n\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j], token)\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\"')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        segment = encode(String(value), token)\n\n        if (!matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"')\n        }\n\n        path += token.prefix + segment\n        continue\n      }\n\n      if (token.optional) continue\n\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + (token.repeat ? 'an array' : 'a string'))\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$/()])/g, '\\\\$1')\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {Array=}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  if (!keys) return path\n\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        pattern: null\n      })\n    }\n  }\n\n  return path\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  return new RegExp('(?:' + parts.join('|') + ')', flags(options))\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}  tokens\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  options = options || {}\n\n  var strict = options.strict\n  var start = options.start !== false\n  var end = options.end !== false\n  var delimiter = options.delimiter || DEFAULT_DELIMITER\n  var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|')\n  var route = start ? '^' : ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var capture = token.repeat\n        ? '(?:' + token.pattern + ')(?:' + escapeString(token.delimiter) + '(?:' + token.pattern + '))*'\n        : token.pattern\n\n      if (keys) keys.push(token)\n\n      if (token.optional) {\n        if (!token.prefix) {\n          route += '(' + capture + ')?'\n        } else {\n          route += '(?:' + escapeString(token.prefix) + '(' + capture + '))?'\n        }\n      } else {\n        route += escapeString(token.prefix) + '(' + capture + ')'\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += '(?:' + escapeString(delimiter) + ')?'\n\n    route += endsWith === '$' ? '$' : '(?=' + endsWith + ')'\n  } else {\n    var endToken = tokens[tokens.length - 1]\n    var isEndDelimited = typeof endToken === 'string'\n      ? endToken[endToken.length - 1] === delimiter\n      : endToken === undefined\n\n    if (!strict) route += '(?:' + escapeString(delimiter) + '(?=' + endsWith + '))?'\n    if (!isEndDelimited) route += '(?=' + escapeString(delimiter) + '|' + endsWith + ')'\n  }\n\n  return new RegExp(route, flags(options))\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {Array=}                keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys)\n  }\n\n  if (Array.isArray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), keys, options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), keys, options)\n}\n","import { parse, compile } from 'path-to-regexp'\n\ntype Params = {\n  method?: string\n  [key: string]: any\n}\n\ntype Helper = (params: Object) => [string, Params]\n\nconst createHelper = (path: string): Helper => {\n  const namedParams = parse(path)\n    .map((p: any) => p.name)\n    .filter(n => n)\n\n  const methodRegex = new RegExp('^(GET|POST|PUT|PATCH|DELETE|HEAD)')\n  const methodMatch = path.match(methodRegex)\n  const method = (methodMatch && methodMatch[0]) || 'GET'\n  const targetPath = path.replace(methodRegex, '').trim()\n  const toPath = compile(targetPath)\n\n  return (params: any = {}) => {\n    let url = toPath(params)\n    if (params.query) {\n      url = url + '?' + new URLSearchParams(params.query).toString()\n    }\n    const newParams: Params = Object.keys(params)\n      .concat('query')\n      .reduce<Params>((acc, key) => {\n        if (namedParams.includes(key)) return acc\n        acc[key] = params[key]\n        return acc\n      }, {})\n    newParams.method = method\n\n    return [url, newParams]\n  }\n}\n\nexport { createHelper }\n","import { createHelper } from './create-helper'\n\ntype ApiClient = (params: Object) => any\ntype FetchMapping = { [endpoint: string]: ApiClient }\ntype PathMapping = { [endpoint: string]: string }\n\ntype Config = {\n  fetchClient: (url: string, params: Object) => any\n  fetchParams: (params: Object) => Object\n}\ntype UserConfig = {\n  fetchClient?: Config['fetchClient']\n  fetchParams?: Config['fetchParams']\n}\ntype CreateApiClient = (path: string, config?: UserConfig) => ApiClient\ntype MapCreateClient = (pathMapping: PathMapping, config?: UserConfig) => FetchMapping\ntype ConfigCreateClient = (userConfig: UserConfig) => CreateClient\n\ninterface CreateClient {\n  (path: string, config?: UserConfig): ApiClient\n  config(config: UserConfig): CreateClient\n  map(pathMapping: PathMapping, config?: UserConfig): FetchMapping\n}\n\nconst defaultConfig: Config = {\n  fetchClient: fetch,\n  fetchParams: params => params\n}\n\nconst create: CreateApiClient = (path, _config) => {\n  const config: Config = Object.assign({}, defaultConfig, _config)\n\n  const helper = createHelper(path)\n  return (data: Object) => {\n    const [url, params] = helper(data)\n    const { fetchClient, fetchParams } = config\n    return fetchClient(url, fetchParams(params))\n  }\n}\n\nconst map: MapCreateClient = (pathMapping, config) => {\n  return Object.keys(pathMapping).reduce<FetchMapping>((acc, endpoint) => {\n    acc[endpoint] = create(pathMapping[endpoint], config)\n    return acc\n  }, {})\n}\n\nconst config: ConfigCreateClient = userConfig => {\n  return Object.assign(\n    (path: string, options?: Object) => {\n      const newOptions = Object.assign({}, userConfig, options)\n      return create(path, newOptions)\n    },\n    {\n      config: config,\n      map: map\n    }\n  )\n}\n\nconst createClient: CreateClient = Object.assign(create, {\n  config: config,\n  map: map\n})\n\nexport { createClient }\n"],"names":["parse","compile"],"mappings":"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"}